// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockCompetitorLaunchesRepo is an autogenerated mock type for the competitorLaunchesRepo type
type mockCompetitorLaunchesRepo struct {
	mock.Mock
}

// CheckLaunches provides a mock function with given fields: ctx, launchpad, localDate
func (_m *mockCompetitorLaunchesRepo) CheckLaunches(ctx context.Context, launchpad string, localDate time.Time) (bool, error) {
	ret := _m.Called(ctx, launchpad, localDate)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) bool); ok {
		r0 = rf(ctx, launchpad, localDate)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, launchpad, localDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockCompetitorLaunchesRepo interface {
	mock.TestingT
	Cleanup(func())
}

// newMockCompetitorLaunchesRepo creates a new instance of mockCompetitorLaunchesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockCompetitorLaunchesRepo(t mockConstructorTestingTnewMockCompetitorLaunchesRepo) *mockCompetitorLaunchesRepo {
	mock := &mockCompetitorLaunchesRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
