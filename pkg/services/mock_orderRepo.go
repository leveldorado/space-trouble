// Code generated by mockery v2.14.0. DO NOT EDIT.

package services

import (
	context "context"

	types "github.com/leveldorado/space-trouble/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// mockOrderRepo is an autogenerated mock type for the orderRepo type
type mockOrderRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *mockOrderRepo) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *mockOrderRepo) Get(ctx context.Context, id string) (types.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 types.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(types.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, o
func (_m *mockOrderRepo) Insert(ctx context.Context, o types.Order) error {
	ret := _m.Called(ctx, o)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, limit, offset
func (_m *mockOrderRepo) List(ctx context.Context, limit int, offset int) ([]types.Order, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []types.Order
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []types.Order); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockOrderRepo interface {
	mock.TestingT
	Cleanup(func())
}

// newMockOrderRepo creates a new instance of mockOrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockOrderRepo(t mockConstructorTestingTnewMockOrderRepo) *mockOrderRepo {
	mock := &mockOrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
